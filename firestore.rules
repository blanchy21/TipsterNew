rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin(auth) {
      // Check if user email is in admin list or has admin custom claim
      return auth.token.email in ['paulblanche@gmail.com', 'admin@tipsterarena.com'] ||
             auth.token.admin == true;
    }
    // Users collection - users can read all profiles (for leaderboard) and write their own profile
    // Admins can write any user profile
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == userId || // User can write their own profile
        isAdmin(request.auth) // Admins can write any user profile
      );
    }
    
    // Posts collection - authenticated users can read all posts, create posts, and update their own posts
    // Admins can update any post for verification purposes
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId || // User can update their own posts
        isAdmin(request.auth) // Admins can update any post for verification
      );
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Comments collection - authenticated users can read all comments and create comments
    // Admins can update/delete any comment
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId || // User can update their own comments
        isAdmin(request.auth) // Admins can update any comment
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.userId || // User can delete their own comments
        isAdmin(request.auth) // Admins can delete any comment
      );
    }
    
    // Following collection - users can read/write their own following data
    // Admins can read/write any following data
    match /following/{userId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == userId || // User can read/write their own following data
        isAdmin(request.auth) // Admins can read/write any following data
      );
    }
    
    // Followers collection - users can read/write their own followers data
    // Admins can read/write any followers data
    match /followers/{userId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == userId || // User can read/write their own followers data
        isAdmin(request.auth) // Admins can read/write any followers data
      );
    }
    
    // Notifications collection - users can read their own notifications
    // Admins can read/write any notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.recipientId || // User can read their own notifications
        isAdmin(request.auth) // Admins can read any notifications
      );
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.recipientId || // User can update their own notifications
        isAdmin(request.auth) // Admins can update any notifications
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.recipientId || // User can delete their own notifications
        isAdmin(request.auth) // Admins can delete any notifications
      );
    }
    
    // Tip verifications collection - authenticated users can read all verifications
    match /tipVerifications/{verificationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // Test collection for debugging - allow all operations for authenticated users
    match /test/{document} {
      allow read, write: if request.auth != null;
    }
  }
}